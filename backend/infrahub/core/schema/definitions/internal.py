from typing import Any

from infrahub.core.constants import (
    DEFAULT_DESCRIPTION_LENGTH,
    DEFAULT_KIND_MAX_LENGTH,
    DEFAULT_KIND_MIN_LENGTH,
    DEFAULT_NAME_MAX_LENGTH,
    DEFAULT_NAME_MIN_LENGTH,
    DEFAULT_REL_IDENTIFIER_LENGTH,
    NAME_REGEX,
    NAMESPACE_REGEX,
    NODE_KIND_REGEX,
    NODE_NAME_REGEX,
    BranchSupportType,
    RelationshipCardinality,
    RelationshipDirection,
    RelationshipKind,
)
from infrahub.types import ATTRIBUTE_KIND_LABELS

internal_schema: dict[str, Any] = {
    "version": None,
    "nodes": [
        {
            "name": "Node",
            "namespace": "Schema",
            "branch": BranchSupportType.AWARE.value,
            "include_in_menu": False,
            "default_filter": "name__value",
            "display_labels": ["label__value"],
            "attributes": [
                {
                    "name": "name",
                    "kind": "Text",
                    "description": "Node name, must be unique within a namespace and must start with an uppercase letter.",
                    "unique": True,
                    "regex": str(NODE_NAME_REGEX),
                    "min_length": DEFAULT_NAME_MIN_LENGTH,
                    "max_length": DEFAULT_NAME_MAX_LENGTH,
                },
                {
                    "name": "namespace",
                    "kind": "Text",
                    "description": "Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
                    "regex": str(NAMESPACE_REGEX),
                    "min_length": DEFAULT_KIND_MIN_LENGTH,
                    "max_length": DEFAULT_KIND_MAX_LENGTH,
                },
                {
                    "name": "label",
                    "kind": "Text",
                    "description": "Human friendly representation of the name/kind",
                    "optional": True,
                    "max_length": DEFAULT_NAME_MAX_LENGTH,
                },
                {
                    "name": "description",
                    "kind": "Text",
                    "description": "Short description of the model, will be visible in the frontend.",
                    "optional": True,
                    "max_length": DEFAULT_DESCRIPTION_LENGTH,
                },
                {
                    "name": "branch",
                    "kind": "Text",
                    "description": "Type of branch support for the model.",
                    "enum": BranchSupportType.available_types(),
                    "default_value": BranchSupportType.AWARE.value,
                    "optional": True,
                },
                {
                    "name": "default_filter",
                    "kind": "Text",
                    "regex": str(NAME_REGEX),
                    "description": "Default filter used to search for a node in addition to its ID.",
                    "optional": True,
                },
                {
                    "name": "display_labels",
                    "kind": "List",
                    "description": "List of attributes to use to generate the display label",
                    "optional": True,
                },
                {
                    "name": "include_in_menu",
                    "kind": "Boolean",
                    "description": "Defines if objects of this kind should be included in the menu.",
                    "default_value": True,
                    "optional": True,
                },
                {
                    "name": "menu_placement",
                    "kind": "Text",
                    "description": "Defines where in the menu this object should be placed.",
                    "optional": True,
                },
                {
                    "name": "icon",
                    "kind": "Text",
                    "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
                    "optional": True,
                },
                {
                    "name": "order_by",
                    "kind": "List",
                    "description": "List of attributes to use to order the results by default",
                    "optional": True,
                },
                {
                    "name": "inherit_from",
                    "kind": "List",
                    "description": "List of Generic Kind that this node is inheriting from",
                    "optional": True,
                },
                {
                    "name": "hierarchy",
                    "kind": "Text",
                    "description": "Internal value to track the name of the Hierarchy, must match the name of a Generic supporting hierarchical mode",
                    "optional": True,
                },
                {
                    "name": "parent",
                    "kind": "Text",
                    "description": "Expected Kind for the parent node in a Hierarchy, default to the main generic defined if not defined.",
                    "optional": True,
                },
                {
                    "name": "children",
                    "kind": "Text",
                    "description": "Expected Kind for the children nodes in a Hierarchy, default to the main generic defined if not defined.",
                    "optional": True,
                },
                {
                    "name": "uniqueness_constraints",
                    "kind": "List",
                    "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
                    "optional": True,
                },
            ],
            "relationships": [
                {
                    "name": "attributes",
                    "peer": "SchemaAttribute",
                    "kind": "Component",
                    "description": "List of supported Attributes for the Node.",
                    "identifier": "schema__node__attributes",
                    "cardinality": "many",
                    "branch": BranchSupportType.AWARE.value,
                    "optional": True,
                },
                {
                    "name": "relationships",
                    "peer": "SchemaRelationship",
                    "kind": "Component",
                    "description": "List of supported Relationships for the Node.",
                    "identifier": "schema__node__relationships",
                    "cardinality": "many",
                    "branch": BranchSupportType.AWARE.value,
                    "optional": True,
                },
            ],
        },
        {
            "name": "Attribute",
            "namespace": "Schema",
            "branch": BranchSupportType.AWARE.value,
            "include_in_menu": False,
            "default_filter": None,
            "display_labels": ["name__value"],
            "attributes": [
                {
                    "name": "name",
                    "description": "Attribute name, must be unique within a model and must be all lowercase.",
                    "kind": "Text",
                    "regex": str(NAME_REGEX),
                    "min_length": DEFAULT_KIND_MIN_LENGTH,
                    "max_length": DEFAULT_KIND_MAX_LENGTH,
                },
                {
                    "name": "kind",
                    "kind": "Text",
                    "description": "Defines the type of the attribute.",
                    "enum": ATTRIBUTE_KIND_LABELS,
                },
                {
                    "name": "enum",
                    "kind": "List",
                    "description": "Define a list of valid values for the attribute.",
                    "optional": True,
                },
                {
                    "name": "choices",
                    "kind": "List",
                    "description": "Define a list of valid choices for a dropdown attribute.",
                    "optional": True,
                },
                {
                    "name": "regex",
                    "kind": "Text",
                    "description": "Regex uses to limit limit the characters allowed in for the attributes.",
                    "optional": True,
                },
                {
                    "name": "max_length",
                    "kind": "Number",
                    "description": "Set a maximum number of characters allowed for a given attribute.",
                    "optional": True,
                },
                {
                    "name": "min_length",
                    "kind": "Number",
                    "description": "Set a minimum number of characters allowed for a given attribute.",
                    "optional": True,
                },
                {
                    "name": "label",
                    "kind": "Text",
                    "optional": True,
                    "description": "Human friendly representation of the name. Will be autogenerated if not provided",
                    "max_length": DEFAULT_NAME_MAX_LENGTH,
                },
                {
                    "name": "description",
                    "kind": "Text",
                    "optional": True,
                    "description": "Short description of the attribute.",
                    "max_length": DEFAULT_DESCRIPTION_LENGTH,
                },
                {
                    "name": "read_only",
                    "kind": "Boolean",
                    "description": "Set the attribute as Read-Only, users won't be able to change its value. "
                    "Mainly relevant for internal object.",
                    "default_value": False,
                    "optional": True,
                },
                {
                    "name": "unique",
                    "kind": "Boolean",
                    "description": "Indicate if the value of this attribute must be unique in the database for a given model.",
                    "default_value": False,
                    "optional": True,
                },
                {
                    "name": "optional",
                    "kind": "Boolean",
                    "description": "Indicate if this attribute is mandatory or optional.",
                    "default_value": True,
                    "optional": True,
                },
                {
                    "name": "branch",
                    "kind": "Text",
                    "description": "Type of branch support for the attribute, if not defined it will be inherited from the node.",
                    "enum": BranchSupportType.available_types(),
                    "optional": True,
                },
                {
                    "name": "order_weight",
                    "kind": "Number",
                    "description": "Number used to order the attribute in the frontend (table and view).",
                    "optional": True,
                },
                {
                    "name": "default_value",
                    "kind": "Any",
                    "description": "Default value of the attribute.",
                    "optional": True,
                },
                {
                    "name": "inherited",
                    "kind": "Boolean",
                    "default_value": False,
                    "description": "Internal value to indicate if the attribute was inherited from a Generic node.",
                    "optional": True,
                },
            ],
            "relationships": [
                {
                    "name": "node",
                    "peer": "SchemaNode",
                    "kind": "Parent",
                    "identifier": "schema__node__attributes",
                    "cardinality": "one",
                    "branch": BranchSupportType.AWARE.value,
                    "optional": False,
                }
            ],
        },
        {
            "name": "Relationship",
            "namespace": "Schema",
            "branch": BranchSupportType.AWARE.value,
            "include_in_menu": False,
            "default_filter": None,
            "display_labels": ["name__value"],
            "attributes": [
                {
                    "name": "name",
                    "kind": "Text",
                    "description": "Relationship name, must be unique within a model and must be all lowercase.",
                    "regex": str(NAME_REGEX),
                    "min_length": DEFAULT_KIND_MIN_LENGTH,
                    "max_length": DEFAULT_KIND_MAX_LENGTH,
                },
                {
                    "name": "peer",
                    "kind": "Text",
                    "description": "Type (kind) of objects supported on the other end of the relationship.",
                    "regex": str(NODE_KIND_REGEX),
                    "min_length": DEFAULT_KIND_MIN_LENGTH,
                    "max_length": DEFAULT_KIND_MAX_LENGTH,
                },
                {
                    "name": "kind",
                    "kind": "Text",
                    "description": "Defines the type of the relationship.",
                    "enum": RelationshipKind.available_types(),
                    "default_value": RelationshipKind.GENERIC.value,
                },
                {
                    "name": "label",
                    "kind": "Text",
                    "description": "Human friendly representation of the name. Will be autogenerated if not provided",
                    "optional": True,
                    "max_length": DEFAULT_NAME_MAX_LENGTH,
                },
                {
                    "name": "description",
                    "kind": "Text",
                    "optional": True,
                    "description": "Short description of the relationship.",
                    "max_length": DEFAULT_DESCRIPTION_LENGTH,
                },
                {
                    "name": "identifier",
                    "kind": "Text",
                    "description": "Unique identifier of the relationship within a model,"
                    " identifiers must match to traverse a relationship on both direction.",
                    "regex": str(NAME_REGEX),
                    "max_length": DEFAULT_REL_IDENTIFIER_LENGTH,
                    "optional": True,
                },
                {
                    "name": "cardinality",
                    "kind": "Text",
                    "description": "Defines how many objects are expected on the other side of the relationship.",
                    "enum": RelationshipCardinality.available_types(),
                    "default_value": RelationshipCardinality.MANY.value,
                    "optional": True,
                },
                {
                    "name": "min_count",
                    "kind": "Number",
                    "description": "Defines the minimum objects allowed on the other side of the relationship.",
                    "default_value": 0,
                    "optional": True,
                },
                {
                    "name": "max_count",
                    "kind": "Number",
                    "description": "Defines the maximum objects allowed on the other side of the relationship.",
                    "default_value": 0,
                    "optional": True,
                },
                {
                    "name": "order_weight",
                    "kind": "Number",
                    "description": "Number used to order the relationship in the frontend (table and view).",
                    "optional": True,
                },
                {
                    "name": "optional",
                    "kind": "Boolean",
                    "description": "Indicate if this relationship is mandatory or optional.",
                    "default_value": False,
                    "optional": True,
                },
                {
                    "name": "branch",
                    "kind": "Text",
                    "description": "Type of branch support for the relatioinship, if not defined it will be determine based both peers.",
                    "enum": BranchSupportType.available_types(),
                    "optional": True,
                },
                {
                    "name": "inherited",
                    "kind": "Boolean",
                    "description": "Internal value to indicate if the relationship was inherited from a Generic node.",
                    "default_value": False,
                    "optional": True,
                },
                {
                    "name": "direction",
                    "kind": "Text",
                    "description": "Defines the direction of the relationship, "
                    " Unidirectional relationship are required when the same model is on both side.",
                    "enum": RelationshipDirection.available_types(),
                    "default_value": RelationshipDirection.BIDIR.value,
                    "optional": True,
                },
                {
                    "name": "hierarchical",
                    "kind": "Text",
                    "description": "Internal attribute to track the type of hierarchy this relationship is part of, must match a valid Generic Kind",
                    "optional": True,
                },
            ],
            "relationships": [
                {
                    "name": "node",
                    "peer": "SchemaNode",
                    "kind": "Parent",
                    "identifier": "schema__node__relationships",
                    "cardinality": "one",
                    "branch": BranchSupportType.AWARE.value,
                    "optional": False,
                }
            ],
        },
        {
            "name": "Generic",
            "namespace": "Schema",
            "branch": BranchSupportType.AWARE.value,
            "include_in_menu": False,
            "default_filter": "name__value",
            "display_labels": ["label__value"],
            "attributes": [
                {
                    "name": "name",
                    "kind": "Text",
                    "description": "Generic name, must be unique within a namespace and must start with an uppercase letter.",
                    "unique": True,
                    "regex": str(NODE_NAME_REGEX),
                    "min_length": DEFAULT_NAME_MIN_LENGTH,
                    "max_length": DEFAULT_NAME_MAX_LENGTH,
                },
                {
                    "name": "namespace",
                    "kind": "Text",
                    "description": "Generic Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
                    "regex": str(NAMESPACE_REGEX),
                    "min_length": DEFAULT_KIND_MIN_LENGTH,
                    "max_length": DEFAULT_KIND_MAX_LENGTH,
                },
                {
                    "name": "label",
                    "kind": "Text",
                    "description": "Human friendly representation of the name/kind",
                    "optional": True,
                    "max_length": 32,
                },
                {
                    "name": "branch",
                    "kind": "Text",
                    "description": "Type of branch support for the model.",
                    "enum": BranchSupportType.available_types(),
                    "default_value": BranchSupportType.AWARE.value,
                    "optional": True,
                },
                {
                    "name": "default_filter",
                    "kind": "Text",
                    "description": "Default filter used to search for a node in addition to its ID.",
                    "regex": str(NAME_REGEX),
                    "optional": True,
                },
                {
                    "name": "order_by",
                    "kind": "List",
                    "description": "List of attributes to use to order the results by default",
                    "optional": True,
                },
                {
                    "name": "display_labels",
                    "kind": "List",
                    "description": "List of attributes to use to generate the display label",
                    "optional": True,
                },
                {
                    "name": "include_in_menu",
                    "kind": "Boolean",
                    "description": "Defines if objects of this kind should be included in the menu.",
                    "default_value": True,
                    "optional": True,
                },
                {
                    "name": "menu_placement",
                    "kind": "Text",
                    "description": "Defines where in the menu this object should be placed.",
                    "optional": True,
                },
                {
                    "name": "icon",
                    "kind": "Text",
                    "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
                    "optional": True,
                },
                {
                    "name": "description",
                    "kind": "Text",
                    "optional": True,
                    "description": "Short description of the Generic.",
                    "max_length": DEFAULT_DESCRIPTION_LENGTH,
                },
                {
                    "name": "hierarchical",
                    "kind": "Boolean",
                    "description": "Defines if the Generic support the hierarchical mode.",
                    "optional": True,
                    "default_value": False,
                },
                {
                    "name": "used_by",
                    "kind": "List",
                    "description": "List of Nodes that are referencing this Generic",
                    "optional": True,
                },
                {
                    "name": "uniqueness_constraints",
                    "kind": "List",
                    "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
                    "optional": True,
                },
            ],
            "relationships": [
                {
                    "name": "attributes",
                    "peer": "SchemaAttribute",
                    "identifier": "schema__node__attributes",
                    "cardinality": "many",
                    "branch": BranchSupportType.AWARE.value,
                    "optional": True,
                },
                {
                    "name": "relationships",
                    "peer": "SchemaRelationship",
                    "identifier": "schema__node__relationships",
                    "cardinality": "many",
                    "branch": BranchSupportType.AWARE.value,
                    "optional": True,
                },
            ],
        },
    ],
}
