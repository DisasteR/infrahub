/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/artifact/{artifact_id}": {
    /** Get Artifact */
    get: operations["get_artifact_api_artifact__artifact_id__get"];
  };
  "/api/artifact/generate/{artifact_definition_id}": {
    /** Generate Artifact */
    post: operations["generate_artifact_api_artifact_generate__artifact_definition_id__post"];
  };
  "/api/auth/login": {
    /** Login User */
    post: operations["login_user_api_auth_login_post"];
  };
  "/api/auth/refresh": {
    /** Refresh Jwt Token */
    post: operations["refresh_jwt_token_api_auth_refresh_post"];
  };
  "/api/auth/logout": {
    /** Logout */
    post: operations["logout_api_auth_logout_post"];
  };
  "/api/diff/data": {
    /** Get Diff Data */
    get: operations["get_diff_data_api_diff_data_get"];
  };
  "/api/diff/schema": {
    /** Get Diff Schema */
    get: operations["get_diff_schema_api_diff_schema_get"];
  };
  "/api/diff/files": {
    /** Get Diff Files */
    get: operations["get_diff_files_api_diff_files_get"];
  };
  "/api/diff/artifacts": {
    /** Get Diff Artifacts */
    get: operations["get_diff_artifacts_api_diff_artifacts_get"];
  };
  "/api/file/{repository_id}/{file_path}": {
    /**
     * Get File
     * @description Retrieve a file from a git repository.
     */
    get: operations["get_file_api_file__repository_id___file_path__get"];
  };
  "/api/config": {
    /** Get Config */
    get: operations["get_config_api_config_get"];
  };
  "/api/info": {
    /** Get Info */
    get: operations["get_info_api_info_get"];
  };
  "/api/menu": {
    /** Get Menu */
    get: operations["get_menu_api_menu_get"];
  };
  "/api/query/{query_id}": {
    /** Graphql Query Get */
    get: operations["graphql_query_get_api_query__query_id__get"];
    /** Graphql Query Post */
    post: operations["graphql_query_post_api_query__query_id__post"];
  };
  "/api/schema/": {
    /** Get Schema */
    get: operations["get_schema_api_schema__get"];
  };
  "/api/schema": {
    /** Get Schema */
    get: operations["get_schema_api_schema_get"];
  };
  "/api/schema/summary": {
    /** Get Schema Summary */
    get: operations["get_schema_summary_api_schema_summary_get"];
  };
  "/api/schema/{schema_kind}": {
    /** Get Schema By Kind */
    get: operations["get_schema_by_kind_api_schema__schema_kind__get"];
  };
  "/api/schema/load": {
    /** Load Schema */
    post: operations["load_schema_api_schema_load_post"];
  };
  "/api/storage/object/{identifier}": {
    /** Get File */
    get: operations["get_file_api_storage_object__identifier__get"];
  };
  "/api/storage/upload/content": {
    /** Upload Content */
    post: operations["upload_content_api_storage_upload_content_post"];
  };
  "/api/storage/upload/file": {
    /** Upload File */
    post: operations["upload_file_api_storage_upload_file_post"];
  };
  "/api/transform/python/{transform_id}": {
    /** Transform Python */
    get: operations["transform_python_api_transform_python__transform_id__get"];
  };
  "/api/transform/jinja2/{transform_id}": {
    /** Transform Jinja2 */
    get: operations["transform_jinja2_api_transform_jinja2__transform_id__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** APIGenericSchema */
    APIGenericSchema: {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Namespace */
      namespace: string;
      /** Description */
      description?: string | null;
      /** Default Filter */
      default_filter?: string | null;
      /** @default aware */
      branch?: components["schemas"]["BranchSupportType"];
      /** Order By */
      order_by?: string[] | null;
      /** Display Labels */
      display_labels?: string[] | null;
      /** Attributes */
      attributes?: components["schemas"]["AttributeSchema"][];
      /** Relationships */
      relationships?: components["schemas"]["RelationshipSchema-Output"][];
      /** Filters */
      filters?: components["schemas"]["FilterSchema"][];
      /** Include In Menu */
      include_in_menu?: boolean | null;
      /** Menu Placement */
      menu_placement?: string | null;
      /** Icon */
      icon?: string | null;
      /** Label */
      label?: string | null;
      /** Uniqueness Constraints */
      uniqueness_constraints?: string[][] | null;
      /**
       * Hierarchical
       * @default false
       */
      hierarchical?: boolean;
      /** Used By */
      used_by?: string[];
      /** Kind */
      kind?: string | null;
      /** Hash */
      hash: string;
    };
    /** APINodeSchema */
    APINodeSchema: {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Namespace */
      namespace: string;
      /** Description */
      description?: string | null;
      /** Default Filter */
      default_filter?: string | null;
      /** @default aware */
      branch?: components["schemas"]["BranchSupportType"];
      /** Order By */
      order_by?: string[] | null;
      /** Display Labels */
      display_labels?: string[] | null;
      /** Attributes */
      attributes?: components["schemas"]["AttributeSchema"][];
      /** Relationships */
      relationships?: components["schemas"]["RelationshipSchema-Output"][];
      /** Filters */
      filters?: components["schemas"]["FilterSchema"][];
      /** Include In Menu */
      include_in_menu?: boolean | null;
      /** Menu Placement */
      menu_placement?: string | null;
      /** Icon */
      icon?: string | null;
      /** Label */
      label?: string | null;
      /** Uniqueness Constraints */
      uniqueness_constraints?: string[][] | null;
      /** Inherit From */
      inherit_from?: string[];
      /** Hierarchy */
      hierarchy?: string | null;
      /** Parent */
      parent?: string | null;
      /** Children */
      children?: string | null;
      /** Kind */
      kind?: string | null;
      /** Hash */
      hash: string;
    };
    /** AccessTokenResponse */
    AccessTokenResponse: {
      /**
       * Access Token
       * @description JWT access_token
       */
      access_token: string;
    };
    /** AnalyticsSettings */
    AnalyticsSettings: {
      /**
       * Enable
       * @default true
       */
      enable?: boolean;
      /** Address */
      address?: string | null;
      /** Api Key */
      api_key?: string | null;
    };
    /** ArtifactGeneratePayload */
    ArtifactGeneratePayload: {
      /** Nodes */
      nodes?: string[];
    };
    /** ArtifactTarget */
    ArtifactTarget: {
      /** Id */
      id: string;
      /** Kind */
      kind: string;
      /** Display Label */
      display_label?: string | null;
    };
    /** AttributeSchema */
    AttributeSchema: {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Kind */
      kind: string;
      /** Label */
      label?: string | null;
      /** Description */
      description?: string | null;
      /** Default Value */
      default_value?: unknown;
      /** Enum */
      enum?: unknown[] | null;
      /** Regex */
      regex?: string | null;
      /** Max Length */
      max_length?: number | null;
      /** Min Length */
      min_length?: number | null;
      /**
       * Read Only
       * @default false
       */
      read_only?: boolean;
      /**
       * Inherited
       * @default false
       */
      inherited?: boolean;
      /**
       * Unique
       * @default false
       */
      unique?: boolean;
      branch?: components["schemas"]["BranchSupportType"] | null;
      /**
       * Optional
       * @default false
       */
      optional?: boolean;
      /** Order Weight */
      order_weight?: number | null;
      /**
       * Choices
       * @description The available choices if the kind is Dropdown.
       */
      choices?: components["schemas"]["DropdownChoice"][] | null;
    };
    /** Body_upload_file_api_storage_upload_file_post */
    Body_upload_file_api_storage_upload_file_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** BranchDiff */
    BranchDiff: {
      /** Diffs */
      diffs?: components["schemas"]["BranchDiffEntry"][];
    };
    /** BranchDiffArtifact */
    BranchDiffArtifact: {
      /** Branch */
      branch: string;
      /** Id */
      id: string;
      /** Display Label */
      display_label?: string | null;
      action: components["schemas"]["DiffAction"];
      target?: components["schemas"]["ArtifactTarget"] | null;
      item_new?: components["schemas"]["BranchDiffArtifactStorage"] | null;
      item_previous?: components["schemas"]["BranchDiffArtifactStorage"] | null;
    };
    /** BranchDiffArtifactStorage */
    BranchDiffArtifactStorage: {
      /** Storage Id */
      storage_id: string;
      /** Checksum */
      checksum: string;
    };
    /** BranchDiffElement */
    BranchDiffElement: {
      type: components["schemas"]["DiffElementType"];
      /** Name */
      name: string;
      /** Path */
      path: string;
      /** Change */
      change:
        | components["schemas"]["BranchDiffElementAttribute"]
        | components["schemas"]["BranchDiffElementRelationshipOne"]
        | components["schemas"]["BranchDiffElementRelationshipMany"];
    };
    /** BranchDiffElementAttribute */
    BranchDiffElementAttribute: {
      /** @default Attribute */
      type?: components["schemas"]["DiffElementType"];
      /** Branches */
      branches?: string[];
      /**
       * Id
       * @default
       */
      id?: string;
      /**
       * @default {
       *   "added": 0,
       *   "removed": 0,
       *   "updated": 0
       * }
       */
      summary?: components["schemas"]["DiffSummary"];
      /** @default unchanged */
      action?: components["schemas"]["DiffAction"];
      value?: components["schemas"]["BranchDiffPropertyCollection"] | null;
      /** Properties */
      properties?: {
        [key: string]: components["schemas"]["BranchDiffPropertyCollection"];
      };
    };
    /** BranchDiffElementRelationshipMany */
    BranchDiffElementRelationshipMany: {
      /** @default RelationshipMany */
      type?: components["schemas"]["DiffElementType"];
      /**
       * Identifier
       * @default
       */
      identifier?: string;
      /** Branches */
      branches?: string[];
      /**
       * @default {
       *   "added": 0,
       *   "removed": 0,
       *   "updated": 0
       * }
       */
      summary?: components["schemas"]["DiffSummary"];
      /** Peers */
      peers?: {
        [key: string]: components["schemas"]["BranchDiffElementRelationshipManyPeer"];
      };
    };
    /** BranchDiffElementRelationshipManyPeer */
    BranchDiffElementRelationshipManyPeer: {
      /** Branches */
      branches?: string[];
      peer: components["schemas"]["BranchDiffRelationshipPeerNode"];
      /** Path */
      path: string;
      /** Properties */
      properties?: {
        [key: string]: components["schemas"]["BranchDiffPropertyCollection"];
      };
      /** Changed At */
      changed_at?: string | null;
      /** Action */
      action?: {
        [key: string]: components["schemas"]["DiffAction"];
      };
    };
    /** BranchDiffElementRelationshipOne */
    BranchDiffElementRelationshipOne: {
      /** @default RelationshipOne */
      type?: components["schemas"]["DiffElementType"];
      /**
       * Id
       * @default
       */
      id?: string;
      /**
       * Identifier
       * @default
       */
      identifier?: string;
      /** Branches */
      branches?: string[];
      /**
       * @default {
       *   "added": 0,
       *   "removed": 0,
       *   "updated": 0
       * }
       */
      summary?: components["schemas"]["DiffSummary"];
      peer?: components["schemas"]["BranchDiffRelationshipOnePeerCollection"] | null;
      /** Properties */
      properties?: {
        [key: string]: components["schemas"]["BranchDiffPropertyCollection"];
      };
      /** Changed At */
      changed_at?: string | null;
      /** Action */
      action?: {
        [key: string]: components["schemas"]["DiffAction"];
      };
    };
    /** BranchDiffEntry */
    BranchDiffEntry: {
      /** Kind */
      kind: string;
      /** Id */
      id: string;
      /** Path */
      path: string;
      /** Elements */
      elements?: {
        [key: string]: components["schemas"]["BranchDiffElement"];
      };
      /**
       * @default {
       *   "added": 0,
       *   "removed": 0,
       *   "updated": 0
       * }
       */
      summary?: components["schemas"]["DiffSummary"];
      /** Action */
      action?: {
        [key: string]: components["schemas"]["DiffAction"];
      };
      /** Display Label */
      display_label?: {
        [key: string]: string;
      };
    };
    /** BranchDiffFile */
    BranchDiffFile: {
      /** Branch */
      branch: string;
      /** Location */
      location: string;
      action: components["schemas"]["DiffAction"];
    };
    /** BranchDiffProperty */
    BranchDiffProperty: {
      /** Branch */
      branch: string;
      /** Type */
      type: string;
      /** Changed At */
      changed_at?: string | null;
      action: components["schemas"]["DiffAction"];
      value: components["schemas"]["BranchDiffPropertyValue"];
    };
    /** BranchDiffPropertyCollection */
    BranchDiffPropertyCollection: {
      /** Path */
      path: string;
      /** Changes */
      changes?: components["schemas"]["BranchDiffProperty"][];
    };
    /** BranchDiffPropertyValue */
    BranchDiffPropertyValue: {
      /** New */
      new?: unknown;
      /** Previous */
      previous?: unknown;
    };
    /** BranchDiffRelationshipOnePeer */
    BranchDiffRelationshipOnePeer: {
      /** Branch */
      branch: string;
      new?: components["schemas"]["BranchDiffRelationshipPeerNode"] | null;
      previous?: components["schemas"]["BranchDiffRelationshipPeerNode"] | null;
    };
    /** BranchDiffRelationshipOnePeerCollection */
    BranchDiffRelationshipOnePeerCollection: {
      /** Path */
      path: string;
      /** Changes */
      changes?: components["schemas"]["BranchDiffRelationshipOnePeer"][];
    };
    /** BranchDiffRelationshipPeerNode */
    BranchDiffRelationshipPeerNode: {
      /** Id */
      id: string;
      /** Kind */
      kind: string;
      /** Display Label */
      display_label?: string | null;
    };
    /** BranchDiffRepository */
    BranchDiffRepository: {
      /** Branch */
      branch: string;
      /** Id */
      id: string;
      /** Display Name */
      display_name?: string | null;
      /** Commit From */
      commit_from: string;
      /** Commit To */
      commit_to: string;
      /** Files */
      files?: components["schemas"]["BranchDiffFile"][];
    };
    /**
     * BranchSupportType
     * @enum {string}
     */
    BranchSupportType: "aware" | "agnostic" | "local";
    /** ConfigAPI */
    ConfigAPI: {
      main: components["schemas"]["MainSettings"];
      logging: components["schemas"]["LoggingSettings"];
      analytics: components["schemas"]["AnalyticsSettings"];
      experimental_features: components["schemas"]["ExperimentalFeaturesSettings"];
    };
    /**
     * DiffAction
     * @enum {string}
     */
    DiffAction: "added" | "removed" | "updated" | "unchanged";
    /**
     * DiffElementType
     * @enum {string}
     */
    DiffElementType: "Attribute" | "RelationshipOne" | "RelationshipMany";
    /** DiffSummary */
    DiffSummary: {
      /**
       * Added
       * @default 0
       */
      added?: number;
      /**
       * Removed
       * @default 0
       */
      removed?: number;
      /**
       * Updated
       * @default 0
       */
      updated?: number;
    };
    /** DropdownChoice */
    DropdownChoice: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Color */
      color?: string | null;
      /** Label */
      label?: string | null;
    };
    /** ExperimentalFeaturesSettings */
    ExperimentalFeaturesSettings: {
      /**
       * Pull Request
       * @default false
       */
      pull_request?: boolean;
      /**
       * Graphql Enums
       * @default false
       */
      graphql_enums?: boolean;
    };
    /** FilterSchema */
    FilterSchema: {
      /** Name */
      name: string;
      kind: components["schemas"]["FilterSchemaKind"];
      /** Enum */
      enum?: unknown[] | null;
      /** Object Kind */
      object_kind?: string | null;
      /** Description */
      description?: string | null;
    };
    /**
     * FilterSchemaKind
     * @enum {string}
     */
    FilterSchemaKind: "Text" | "Number" | "Boolean" | "Object" | "MultiObject" | "Enum";
    /**
     * GenericSchema
     * @description A Generic can be either an Interface or a Union depending if there are some Attributes or Relationships defined.
     */
    GenericSchema: {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Namespace */
      namespace: string;
      /** Description */
      description?: string | null;
      /** Default Filter */
      default_filter?: string | null;
      /** @default aware */
      branch?: components["schemas"]["BranchSupportType"];
      /** Order By */
      order_by?: string[] | null;
      /** Display Labels */
      display_labels?: string[] | null;
      /** Attributes */
      attributes?: components["schemas"]["AttributeSchema"][];
      /** Relationships */
      relationships?: components["schemas"]["RelationshipSchema-Input"][];
      /** Filters */
      filters?: components["schemas"]["FilterSchema"][];
      /** Include In Menu */
      include_in_menu?: boolean | null;
      /** Menu Placement */
      menu_placement?: string | null;
      /** Icon */
      icon?: string | null;
      /** Label */
      label?: string | null;
      /** Uniqueness Constraints */
      uniqueness_constraints?: string[][] | null;
      /**
       * Hierarchical
       * @default false
       */
      hierarchical?: boolean;
      /** Used By */
      used_by?: string[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** InfoAPI */
    InfoAPI: {
      /** Deployment Id */
      deployment_id: string;
      /** Version */
      version: string;
    };
    /** InterfaceMenu */
    InterfaceMenu: {
      /**
       * Title
       * @description Title of the menu item
       */
      title: string;
      /**
       * Path
       * @description URL endpoint if applicable
       * @default
       */
      path?: string;
      /**
       * Icon
       * @description The icon to show for the current view
       * @default
       */
      icon?: string;
      /**
       * Children
       * @description Child objects
       */
      children?: components["schemas"]["InterfaceMenu"][];
      /**
       * Kind
       * @default
       */
      kind?: string;
    };
    /** LoggingSettings */
    LoggingSettings: {
      /**
       * @default {
       *   "enable": false
       * }
       */
      remote?: components["schemas"]["RemoteLoggingSettings"];
    };
    /** MainSettings */
    MainSettings: {
      /**
       * Default Branch
       * @default main
       */
      default_branch?: string;
      /**
       * Docs Index Path
       * @description Full path of saved json containing pre-indexed documentation
       * @default /opt/infrahub/docs/build/search-index.json
       */
      docs_index_path?: string;
      /**
       * Internal Address
       * @default http://localhost:8000
       */
      internal_address?: string;
      /**
       * Allow Anonymous Access
       * @description Indicates if the system allows anonymous read access
       * @default true
       */
      allow_anonymous_access?: boolean;
    };
    /** NodeExtensionSchema */
    NodeExtensionSchema: {
      /** Kind */
      kind: string;
      /** Attributes */
      attributes?: components["schemas"]["AttributeSchema"][];
      /** Relationships */
      relationships?: components["schemas"]["RelationshipSchema-Input"][];
    };
    /** NodeSchema */
    NodeSchema: {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Namespace */
      namespace: string;
      /** Description */
      description?: string | null;
      /** Default Filter */
      default_filter?: string | null;
      /** @default aware */
      branch?: components["schemas"]["BranchSupportType"];
      /** Order By */
      order_by?: string[] | null;
      /** Display Labels */
      display_labels?: string[] | null;
      /** Attributes */
      attributes?: components["schemas"]["AttributeSchema"][];
      /** Relationships */
      relationships?: components["schemas"]["RelationshipSchema-Input"][];
      /** Filters */
      filters?: components["schemas"]["FilterSchema"][];
      /** Include In Menu */
      include_in_menu?: boolean | null;
      /** Menu Placement */
      menu_placement?: string | null;
      /** Icon */
      icon?: string | null;
      /** Label */
      label?: string | null;
      /** Uniqueness Constraints */
      uniqueness_constraints?: string[][] | null;
      /** Inherit From */
      inherit_from?: string[];
      /** Hierarchy */
      hierarchy?: string | null;
      /** Parent */
      parent?: string | null;
      /** Children */
      children?: string | null;
    };
    /** PasswordCredential */
    PasswordCredential: {
      /**
       * Username
       * @description Name of the user that is logging in.
       */
      username: string;
      /**
       * Password
       * @description The password of the user.
       */
      password: string;
    };
    /** QueryPayload */
    QueryPayload: {
      /** Variables */
      variables?: {
        [key: string]: string;
      };
    };
    /**
     * RelationshipCardinality
     * @enum {string}
     */
    RelationshipCardinality: "one" | "many";
    /**
     * RelationshipDirection
     * @enum {string}
     */
    RelationshipDirection: "bidirectional" | "outbound" | "inbound";
    /**
     * RelationshipKind
     * @enum {string}
     */
    RelationshipKind: "Generic" | "Attribute" | "Component" | "Parent" | "Group" | "Hierarchy";
    /** RelationshipSchema */
    "RelationshipSchema-Input": {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Peer */
      peer: string;
      /** @default Generic */
      kind?: components["schemas"]["RelationshipKind"];
      /** @default bidirectional */
      direction?: components["schemas"]["RelationshipDirection"];
      /** Label */
      label?: string | null;
      /** Description */
      description?: string | null;
      /** Identifier */
      identifier?: string | null;
      /**
       * Inherited
       * @default false
       */
      inherited?: boolean;
      /** @default many */
      cardinality?: components["schemas"]["RelationshipCardinality"];
      branch?: components["schemas"]["BranchSupportType"] | null;
      /**
       * Optional
       * @default true
       */
      optional?: boolean;
      /** Hierarchical */
      hierarchical?: string | null;
      /** Filters */
      filters?: components["schemas"]["FilterSchema"][];
      /** Order Weight */
      order_weight?: number | null;
      /**
       * Min Count
       * @default 0
       */
      min_count?: number;
      /**
       * Max Count
       * @default 0
       */
      max_count?: number;
    };
    /** RelationshipSchema */
    "RelationshipSchema-Output": {
      /** Id */
      id?: string | null;
      /** Name */
      name: string;
      /** Peer */
      peer: string;
      /** @default Generic */
      kind?: components["schemas"]["RelationshipKind"];
      /** @default bidirectional */
      direction?: components["schemas"]["RelationshipDirection"];
      /** Label */
      label?: string | null;
      /** Description */
      description?: string | null;
      /** Identifier */
      identifier?: string | null;
      /**
       * Inherited
       * @default false
       */
      inherited?: boolean;
      /** @default many */
      cardinality?: components["schemas"]["RelationshipCardinality"];
      branch?: components["schemas"]["BranchSupportType"] | null;
      /**
       * Optional
       * @default true
       */
      optional?: boolean;
      /** Hierarchical */
      hierarchical?: string | null;
      /** Filters */
      filters?: components["schemas"]["FilterSchema"][];
      /** Order Weight */
      order_weight?: number | null;
      /**
       * Min Count
       * @default 0
       */
      min_count?: number;
      /**
       * Max Count
       * @default 0
       */
      max_count?: number;
    };
    /** RemoteLoggingSettings */
    RemoteLoggingSettings: {
      /**
       * Enable
       * @default false
       */
      enable?: boolean;
      /** Frontend Dsn */
      frontend_dsn?: string | null;
      /** Api Server Dsn */
      api_server_dsn?: string | null;
      /** Git Agent Dsn */
      git_agent_dsn?: string | null;
    };
    /** SchemaBranchHash */
    SchemaBranchHash: {
      /** Main */
      main: string;
      /** Nodes */
      nodes?: {
        [key: string]: string;
      };
      /** Generics */
      generics?: {
        [key: string]: string;
      };
    };
    /** SchemaExtension */
    SchemaExtension: {
      /** Nodes */
      nodes?: components["schemas"]["NodeExtensionSchema"][];
    };
    /** SchemaLoadAPI */
    SchemaLoadAPI: {
      /** Version */
      version: string;
      /** Generics */
      generics?: components["schemas"]["GenericSchema"][];
      /** Nodes */
      nodes?: components["schemas"]["NodeSchema"][];
      /**
       * @default {
       *   "nodes": []
       * }
       */
      extensions?: components["schemas"]["SchemaExtension"];
    };
    /** SchemaNamespace */
    SchemaNamespace: {
      /** Name */
      name: string;
      /** User Editable */
      user_editable: boolean;
    };
    /** SchemaReadAPI */
    SchemaReadAPI: {
      /**
       * Main
       * @description Main hash for the entire schema
       */
      main: string;
      /** Nodes */
      nodes?: components["schemas"]["APINodeSchema"][];
      /** Generics */
      generics?: components["schemas"]["APIGenericSchema"][];
      /** Namespaces */
      namespaces?: components["schemas"]["SchemaNamespace"][];
    };
    /** SchemasLoadAPI */
    SchemasLoadAPI: {
      /** Version */
      version?: string | null;
      /** Generics */
      generics?: components["schemas"]["GenericSchema"][];
      /** Nodes */
      nodes?: components["schemas"]["NodeSchema"][];
      /**
       * @default {
       *   "nodes": []
       * }
       */
      extensions?: components["schemas"]["SchemaExtension"];
      /** Schemas */
      schemas: components["schemas"]["SchemaLoadAPI"][];
    };
    /** UploadContentPayload */
    UploadContentPayload: {
      /** Content */
      content: string;
    };
    /** UploadResponse */
    UploadResponse: {
      /** Identifier */
      identifier: string;
      /** Checksum */
      checksum: string;
    };
    /** UserToken */
    UserToken: {
      /**
       * Access Token
       * @description JWT access_token
       */
      access_token: string;
      /**
       * Refresh Token
       * @description JWT refresh_token
       */
      refresh_token: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Get Artifact */
  get_artifact_api_artifact__artifact_id__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        artifact_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Generate Artifact */
  generate_artifact_api_artifact_generate__artifact_definition_id__post: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        artifact_definition_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ArtifactGeneratePayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Login User */
  login_user_api_auth_login_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordCredential"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserToken"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Refresh Jwt Token */
  refresh_jwt_token_api_auth_refresh_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccessTokenResponse"];
        };
      };
    };
  };
  /** Logout */
  logout_api_auth_logout_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Diff Data */
  get_diff_data_api_diff_data_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BranchDiff"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Diff Schema */
  get_diff_schema_api_diff_schema_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BranchDiff"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Diff Files */
  get_diff_files_api_diff_files_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: {
              [key: string]: components["schemas"]["BranchDiffRepository"];
            };
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Diff Artifacts */
  get_diff_artifacts_api_diff_artifacts_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["BranchDiffArtifact"];
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get File
   * @description Retrieve a file from a git repository.
   */
  get_file_api_file__repository_id___file_path__get: {
    parameters: {
      query?: {
        commit?: string | null;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        repository_id: string;
        file_path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Config */
  get_config_api_config_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigAPI"];
        };
      };
    };
  };
  /** Get Info */
  get_info_api_info_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InfoAPI"];
        };
      };
    };
  };
  /** Get Menu */
  get_menu_api_menu_get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InterfaceMenu"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Graphql Query Get */
  graphql_query_get_api_query__query_id__get: {
    parameters: {
      query?: {
        /** @description List of subscribers to attach to the CoreGraphQLQueryGroup */
        subscribers?: string[];
        /** @description When True create or update a CoreGraphQLQueryGroup with all nodes related to this query. */
        update_group?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        /** @description ID or Name of the GraphQL query to execute */
        query_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Graphql Query Post */
  graphql_query_post_api_query__query_id__post: {
    parameters: {
      query?: {
        /** @description List of subscribers to attach to the CoreGraphQLQueryGroup */
        subscribers?: string[];
        /** @description When True create or update a CoreGraphQLQueryGroup with all nodes related to this query. */
        update_group?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        /** @description ID or Name of the GraphQL query to execute */
        query_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["QueryPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Schema */
  get_schema_api_schema__get: {
    parameters: {
      query?: {
        namespaces?: string[] | null;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaReadAPI"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Schema */
  get_schema_api_schema_get: {
    parameters: {
      query?: {
        namespaces?: string[] | null;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaReadAPI"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Schema Summary */
  get_schema_summary_api_schema_summary_get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaBranchHash"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Schema By Kind */
  get_schema_by_kind_api_schema__schema_kind__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      path: {
        schema_kind: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json":
            | components["schemas"]["APINodeSchema"]
            | components["schemas"]["APIGenericSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Load Schema */
  load_schema_api_schema_load_post: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemasLoadAPI"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get File */
  get_file_api_storage_object__identifier__get: {
    parameters: {
      path: {
        identifier: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Upload Content */
  upload_content_api_storage_upload_content_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UploadContentPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UploadResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Upload File */
  upload_file_api_storage_upload_file_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_file_api_storage_upload_file_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UploadResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transform Python */
  transform_python_api_transform_python__transform_id__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        transform_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transform Jinja2 */
  transform_jinja2_api_transform_jinja2__transform_id__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
        /** @description Temporarily rebase the current branch with the main branch for the duration of the query */
        rebase?: boolean;
      };
      path: {
        /** @description ID or Name of the Jinja2 Transform to render */
        transform_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
